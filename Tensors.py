# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PiIUIIFlSx-n5whj3ENf0lfEkLjbbkfB
"""

import tensorflow as tf
import numpy as np

"""# **Tensors**

Tensors are multi-dimensional arrays with a uniform type (called a dtype). You can see all supported dtypes at tf.dtypes.DType.

All tensors are immutable like Python numbers and strings: you can never update the contents of a tensor, only create a new one.


*   A scalar is a single number
*   A vector is an array of numbers.
*   A matrix is a 2-D array
*   A tensor is a n-dimensional array with n >2
"""

a = [1,2,3,4]

a[2]

#2d-array:
 
dd = [
[1,2,3],
[4,5,6],
[7,8,9]
]

dd[0][2]

"""**Rank:**
The rank of a tensor refers to the number of dimensions present within the tensor.

**Rank & Indexes:**

The rank of a tensor tells us how many indexes are required to access (refer to) a specific data element contained within the tensor data structure.

A tensor's rank tells us how many indexes are needed to refer to a specific element within the tensor.
"""

dd = [
[1,2,3],
[4,5,6],
[7,8,9]
]


dd[0]

dd[1]

dd[2]

dd[0][0]

dd[1][0]

dd[2][0]

dd[0][1]

dd[1][1]

dd[2][1]

dd[0][2]

dd[1][2]

dd[2][2]

"""### **Shape of a Tensor**
The shape of a tensor is determined by the length of each axis, so if we know the shape of a given tensor, then we know the length of each axis, and this tells us how many indexes are available along each axis.

The shape of a tensor gives us the length of each axis of the tensor.
"""

dd = [
[1,2,3],
[4,5,6],
[7,8,9]
]

t = tf.constant(dd)      # constant() is a function that helps you create a constant tensor
t

type(t)

t.shape



"""### **Tensor Operation Types**

We have the following high-level categories of operations:

*  Reshaping operations
*  Element-wise operations
*   Reduction operations
*   Access operations
"""

t = tf.constant([
    [1,1,1,1],
    [2,2,2,2],
    [3,3,3,3]
], dtype=tf.float32)    # can also mention the type of the element we want in the tensor

reshaped_tensor = tf.reshape(t, [1,12])     # reshape is a function that helps to reshaping any ndarray or ndtensor
print(reshaped_tensor)

reshaped_tensor = tf.reshape(t, [3,4]) # rows * columns = 12 elements
print(reshaped_tensor)

"""## **Changing Shape By Squeezing And Unsqueezing**"""

print(tf.reshape(t, [2,6]))

print(tf.reshape(t, [2,6]).shape)

print(tf.squeeze(tf.reshape(t, [2,6])))

print(tf.squeeze(tf.reshape(t, [2,6])).shape)

"""### **Flatten A Tensor**
A flatten operation on a tensor reshapes the tensor to have a shape that is equal to the number of elements contained in the tensor. This is the same thing as a 1d-array of elements.

Flattening a tensor means to remove all of the dimensions except for one.
"""

def flatten(t):
    t = tf.reshape(t, [1, -1])
    t = tf.squeeze(t)
    return t

t = tf.ones([4, 3])
t

flatten(t)

"""### **Concatenating Tensors**
We combine tensors using the concat() function, and the resulting tensor will have a shape that depends on the shape of the two input tensors.
"""

t1 = tf.constant([
    [1,2],
    [3,4]
])

t2 = tf.constant([
    [5,6],
    [7,8]
])

tf.concat((t1, t2), axis = 0)  # concat() helps you to concatenate two tensors according to the given axis

tf.concat((t1, t2), axis = 1)